fun! EnsureVamIsOnDisk(vam_install_path)
  let is_installed_c = "isdirectory(a:vam_install_path.'/vim-addon-manager/autoload')"
  if eval(is_installed_c)
    return 1
  else
    if 1 == confirm("Clone VAM into ".a:vam_install_path."?","&Y\n&N")
      " I'm sorry having to add this reminder. Eventually it'll pay off.
      call confirm("Remind yourself that most plugins ship with ".
		  \"documentation (README*, doc/*.txt). It is your ".
		  \"first source of knowledge. If you can't find ".
		  \"the info you're looking for in reasonable ".
		  \"time ask maintainers to improve documentation")
      call mkdir(a:vam_install_path, 'p')
      execute '!git clone --depth=1 git://github.com/MarcWeber/vim-addon-manager '.shellescape(a:vam_install_path, 1).'/vim-addon-manager'
      exec 'helptags '.fnameescape(a:vam_install_path.'/vim-addon-manager/doc')
    endif
    return eval(is_installed_c)
  endif
endf

fun! SetupVAM()
  let vam_install_path = expand('$HOME') . '/.vim/vim-addons'

  if !EnsureVamIsOnDisk(vam_install_path)
    echohl ErrorMsg
    echomsg "No VAM found!"
    echohl NONE
    return
  endif
  exec 'set runtimepath+='.vam_install_path.'/vim-addon-manager'
  call vam#ActivateAddons(['rails', 'snipmate', 'snipmate-snippets','The_NERD_Commenter', 'AutoClose%2009', 'Command-T', 'vim-addon-scala', 'cucumber.zip', 'taglist', 'ack', 'Powerline', 'vim-coffee-script', 'endwise', 'Tabular', 'css_color', 'vim-ruby', 'LustyExplorer'], {'auto_install' : 1})
  call vam#ActivateAddons(['github:scrooloose/nerdtree'], {'auto_install' : 1})
  call vam#ActivateAddons(['github:skwp/vim-ruby-conque'], {'auto_install' : 1}) "need to install https://code.google.com/p/conque/
endfun

call SetupVAM()

colorscheme wombat256mod

filetype plugin indent on

syntax on

" use , as the leader key
let mapleader = "," 

" create tmp dir
silent execute '!mkdir -p ~/.vim/tmp'
set backupdir=~/.vim/tmp//
set directory=~/.vim/tmp//
set viewdir=~/.vim/tmp//
set undodir=~/.vim/tmp//


" gui related settings
if has("gui_gvim")
  set guifont=consolas\ 14
endif

" options for macvim and gvim
if has("gui_running")
    set cursorline
endif

" macvim only options
if has("gui_macvim")
    set guifont=consolas:h14
    set relativenumber
    set undofile
endif

" control-j/k/h/l move to split up/down/left/right
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" autoreload files if changed externally
set autoread

" just make things better
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set nowrap
set number

" ignore binary files
set wildignore+=*.o,*.obj,.git,*.class,*.jar,*.pyc

" if you search for an all-lowercase string your search will be case-insensitive, but if one or more characters is uppercase the search will be case-sensitive
set ignorecase
set smartcase

" applies substitutions globally on lines (s/../../g by default)
set gdefault

" highlight search results as you type
set incsearch
set showmatch
set hlsearch

" clear out a search by typing ,<space>
nnoremap <leader><space> :noh<cr>

"make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

" close buffer
map <C-z> :bd<CR>

" ,r to execute ruby script
nnoremap <leader>r :w<CR>:! ruby %<CR>

" ,s to execute scala script
nnoremap <leader>s :w<CR>:! scala %<CR>

",v edits .vimrc
map ,v :e ~/.vimrc<CR>

" taglist settings
set tags=tags;/
" F8 to toggle tag list window
nnoremap <silent> <F8> :TlistToggle<CR>
let Tlist_Ctags_Cmd="/usr/local/bin/ctags"

nnoremap <silent> <F10> :NERDTreeFind<CR>

" tab setttings. expand tabs to spaces, use width 4
" see http://vimcasts.org/episodes/tabs-and-spaces/
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" fold settings
set foldmethod=syntax
set foldlevelstart=20

" auto align for cucumber features
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
  let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" auto save when focus is lost
function! FocusLost_SaveFiles()
  exe ":au FocusLost" expand("%") ":wa"
endfunction

:call FocusLost_SaveFiles()

let g:ruby_conque_rspec_command='bundle exec rspec'
" Cmd-Shift-R for RSpec
nmap <silent> <D-R> :call RunRspecCurrentFileConque()<CR>
" Cmd-Shift-L for RSpec Current Line
nmap <silent> <D-L> :call RunRspecCurrentLineConque()<CR>
" ,Cmd-R for Last conque command
nmap <silent> ,<D-R> :call RunLastConqueCommand()<CR>
